generator client {
  provider = "prisma-client-js"
  previewFeatures = ["clientExtensions", "postgresqlExtensions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  extensions      = [pgcrypto]
}

model account {
  id              String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id         String       @db.Uuid
  organization_id String       @db.Uuid
  created_at      DateTime     @default(now()) @db.Timestamp(6)
  updated_at      DateTime     @default(now()) @db.Timestamp(6)
  organization    organization @relation(fields: [organization_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  user            user         @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model deposit {
  id              String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  amount          Int
  currency        String       @db.VarChar(255)
  organization_id String       @db.Uuid
  created_at      DateTime     @default(now()) @db.Timestamp(6)
  updated_at      DateTime     @default(now()) @db.Timestamp(6)
  organization    organization @relation(fields: [organization_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model invite {
  id                           String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  invited_by                   String       @db.Uuid
  invitee                      String       @db.Uuid
  organization_id              String       @db.Uuid
  created_at                   DateTime     @default(now()) @db.Timestamp(6)
  updated_at                   DateTime     @default(now()) @db.Timestamp(6)
  user_invite_invited_byTouser user         @relation("invite_invited_byTouser", fields: [invited_by], references: [id], onDelete: Cascade, onUpdate: NoAction)
  user_invite_inviteeTouser    user         @relation("invite_inviteeTouser", fields: [invitee], references: [id], onDelete: Cascade, onUpdate: NoAction)
  organization                 organization @relation(fields: [organization_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model organization {
  id            String          @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  description   String?         @db.VarChar(255)
  name          String          @db.VarChar(255)
  created_at    DateTime        @default(now()) @db.Timestamp(6)
  updated_at    DateTime        @default(now()) @db.Timestamp(6)
  user_id       String          @db.Uuid
  tenant_id     String          @db.VarChar(255)
  account       account[]
  deposit       deposit[]
  invite        invite[]
  user          user            @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  Renamedreturn Renamedreturn[]
}

/// This model has been renamed to 'Renamedreturn' during introspection, because the original name 'return' is reserved.
model Renamedreturn {
  id              String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  percentage      Int
  organization_id String       @db.Uuid
  created_at      DateTime     @default(now()) @db.Timestamp(6)
  updated_at      DateTime     @default(now()) @db.Timestamp(6)
  organization    organization @relation(fields: [organization_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@map("return")
}

model user {
  id                             String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email                          String         @unique @db.VarChar(255)
  firstName                      String?        @db.VarChar(255)
  lastName                       String?        @db.VarChar(255)
  roq_user_id                    String         @db.VarChar(255)
  tenant_id                      String         @db.VarChar(255)
  created_at                     DateTime       @default(now()) @db.Timestamp(6)
  updated_at                     DateTime       @default(now()) @db.Timestamp(6)
  account                        account[]
  invite_invite_invited_byTouser invite[]       @relation("invite_invited_byTouser")
  invite_invite_inviteeTouser    invite[]       @relation("invite_inviteeTouser")
  organization                   organization[]
}
